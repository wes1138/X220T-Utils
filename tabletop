#!/bin/bash

#######  Configuration  #######
# Your default (internal) output name (in xrandr-speak)
internal="LVDS1"
###############################

# We will need to determine the various tablet input devices so that we
# can control their orientation when rotating our display.  Experience
# shows that these id's are not static, and change across boots.
tabdevlist=$(xsetwacom list devices)
idstylus=$(echo "$tabdevlist" | grep -i "stylus" | \
	grep -o '\<id:[[:space:]]*[0-9]\+\>')
idstylus=${idstylus//[^0-9]/}
# echo "The stylus id is $idstylus"
idtouch=$(echo "$tabdevlist" | grep -i "touch" | \
	grep -o '\<id:[[:space:]]*[0-9]\+\>')
idtouch=${idtouch//[^0-9]/}
# echo "The touch id is $idtouch"
ideraser=$(echo "$tabdevlist" | grep -i "eraser" | \
	grep -o '\<id:[[:space:]]*[0-9]\+\>')
ideraser=${ideraser//[^0-9]/}
# echo "The eraser id is $ideraser"

# for the X220T, you will need to find the id of the trackpoint, so that you
# can disable it when the tablet is folded (failing to do so can lead to very
# erratic behavior of the stylus, as the trackpoint is triggered when you
# press on the tablet.  Thanks to Daniel German for figuring this out).
# Try to auto-detect the trackpoint.  Note: you have to be very specific with
# the query, since there might be an external keyboard with trackpoint, which
# you would NOT want to disable at this time.
trackpointid=$(xinput list | grep "PS/2 IBM TrackPoint" | \
	grep -o '\<id=[0-9]\+\>')
trackpointid=${trackpointid//[^0-9]/}

###############################


tabletop_usage()
{
cat << EOF
usage: tabletop [OPTIONS]

Modifies various tablet-related settings, including display orientation, and
controls for toggling the touchscreen, pen, etc.

OPTIONS:
   -h           Show this message
   -i           Invert the internal display
   -I           Set internal display to normal orientation
   -r           Rotate internal display 90 degrees, cc
   -t           Enable finger touch (does not affect stylus)
   -T           Disable finger touch (does not affect stylus)
   -m           Map the tablet events to the internal display.  This can be
                useful if an external display is connected which has a
                different size than the screen you're writing on.
   -v           Verbose (print more stuff)

EXAMPLES:
   If during a lecture or presentation you have an external display that you
   would like to write on (via your tablet's screen), you could invert your
   internal display (to avoid having to physically rotate your computer) and
   disable the touchscreen (so that your palm does not register events when
   you write) with the following command:

		   tabletop -iT

EOF
}


while getopts "hiIrtTmv" OPTION
do
	case $OPTION in
	h)
		tabletop_usage
		exit 0
		;;
	i)
		invert=1
		;;
	I)
		invert=0
		;;
	r)
		rotate=1
		;;
	t)
		fingertouch="on"
		;;
	T)
		fingertouch="off"
		;;
	m)
		mapoutput=1
		;;
	v)
		verbose=1
		;;
	?)
		tabletop_usage
		exit 0
		;;
	esac
done

if [[ $OPTIND == 1 ]] # no options
then
	tabletop_usage
	exit 1
fi

# when verbose is specified, try to pass that flag along to all the
# subroutines, and maybe echo some messages yourself.
if [[ $verbose = 1 ]]; then
	verbose="--verbose"
else
	verbose=""
fi

# if both invert and rotate are specified, we'll let invert take precedence.
# no particular reason, other than it is the less expensive operation.
if [[ $invert = 1 ]]; then
	# note that we do not attempt to set the resolution / mode; it is
	# assumed that this has already been done, and we don't want to
	# reset it here.
	xrandr $verbose --output $internal --rotate inverted
	xsetwacom $verbose set $idtouch Rotate half
	xsetwacom $verbose set $idstylus Rotate half
	xsetwacom $verbose set $ideraser Rotate half
	[[ -n $trackpointid ]] && xinput --disable $trackpointid
elif [[ $invert = 0 ]]; then
	xrandr $verbose --output $internal --rotate normal
	xsetwacom $verbose set $idtouch Rotate none
	xsetwacom $verbose set $idstylus Rotate none
	xsetwacom $verbose set $ideraser Rotate none
	[[ -n $trackpointid ]] && xinput --enable $trackpointid
elif [[ $rotate = 1 ]]; then
	# in this case, we do try to set the resolution, since that is the more
	# typical application (not likely to do this when attached to a mirrored
	# external display, right??)
	xrandr $verbose --output $internal --auto --rotate left
	xsetwacom $verbose set $idtouch Rotate ccw
	xsetwacom $verbose set $idstylus Rotate ccw
	xsetwacom $verbose set $ideraser Rotate ccw
	[[ -n $trackpointid ]] && xinput --disable $trackpointid
fi

# If you read the xsetwacom documentation carefully, you may be wondering
# why we have rotated every one of the devices.  After all, the manual
# states the following:
#
#   Rotation  is  a tablet-wide option: rotation of one tool affects all other
#   tools associated with the same tablet. When the tablet is physically
#   rotated, rotate any tool to the corresponding orientation.
#
# But that was a lie.  So we must rotate them all @_@

# TODO: get rid of the -I option?  Use -i to toggle inversion, instead of
# setting it?  You can extract this information from xrandr, although it
# is a little annoying.
# TODO: get rid of -T as well, making -t toggle the touch?


if [[ $mapoutput == 1 ]]; then
	# for each device, call map output.
	xsetwacom $verbose set $idtouch MapToOutput $internal
	xsetwacom $verbose set $idstylus MapToOutput $internal
	xsetwacom $verbose set $ideraser MapToOutput $internal
fi

[[ -n $fingertouch ]] && xsetwacom set $idtouch Touch $fingertouch

