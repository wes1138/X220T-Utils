#!/bin/bash

toggledisplay_usage()
{
cat << EOF
usage: toggledisplay [OPTIONS]

Provides a simple interface for toggling / mirroring external monitors.

OPTIONS:
   -h             Show this message
   -t             Toggle internal / external monitor
   -m             Attempt to mirror outputs
   -a NUM         When trying to mirror, accept an approximate match
                  which has L2 distance of up to NUM.  Defaults to 10.
                  Note that passing -a0 will completely disable
                  approximate matching.
   -d             Disconnect all external monitors, enable internal
   -e MONITORS    Use MONITORS as the list of external displays for
                  the operation (by default, all connected monitors
                  are used)
   -v             Verbose messages.

NOTE: all options are mutually exlusive, except for -e and -a, which
      are compatible with all other options
NOTE: This script assumes that the internal display is named LVDS1

EXAMPLES:

* To mirror the internal with an external display named VGA1:

	toggledisplay -m -e VGA1

* To toggle two specific monitors, HDMI1 and VGA1 with the internal display:

	toggledisplay -t -e 'HDMI1 VGA1'

EOF
}

sloppyness=10

while getopts "htmde:a:v" OPTION
do
	case $OPTION in
	h)
		toggledisplay_usage
		exit 0
		;;
	t)
		toggle=1
		;;
	m)
		mirror=1
		;;
	d)
		discon=1
		;;
	e)
		externs=$OPTARG
		;;
	a)
		sloppyness=$OPTARG
		;;
	v)
		verbose=1
		;;
	?)
		toggledisplay_usage
		exit 0
		;;
	esac
done

if [[ $OPTIND == 1 ]]
then # default to toggle.
	toggle=1
fi

# square the error bound so we don't have to compute square roots
sloppyness=$(($sloppyness*$sloppyness))

# default internal display:
int="LVDS1"
# TODO: make this configurable?

# get the script path:
spath=$(cd $(dirname $0); pwd -P)
# NOTE: above only needed to resolve listmodes.awk
# TODO: make listmodes.awk internal?  It is pretty short...

# grab the current state of our monitors
xrr=$(xrandr -q --current)
# NOTE: --current makes xrandr return much faster, since it does not have
# to poll the hardware.  In my experience, polling is not necessary: e.g.,
# if I plug in a VGA cable and then immediately run xrandr --current, the
# newly attached VGA shows up in the list.

# get the list of external monitors if it has not been provided.
if [[ -z $externs ]]; then
	externs=$(awk '/\<connected\>/ {print $1}' <<< "$xrr")
	# remove the internal display from the list:
	externs=${externs//$int/}
fi

# if there are no external displays found, then there isn't much to do,
# so we should bail out here.
if [[ -z ${externs// /} ]]; then
	echo "No external displays found."
	exit 1;
fi

# TODO: more testing.

# list of commands:
cmds=( --off --auto )
if [[ $toggle == 1 ]]; then
	# figure out if the internal is on, and set the command based on that.
	( echo "$xrr" | grep "$int" | grep -q "+" ) && k=1 || k=0

	xrcmd=""
	for ext in $externs; do
		xrcmd="$xrcmd --output $ext ${cmds[$k]}"
	done
	xrandr $xrcmd --output $int ${cmds[($k+1)%2]}
	# return with status of last operation:
	exit
fi

# for the moment, we'll try to mirror with the first external
# and ignore all the other ones.
if [[ $mirror == 1 ]]; then
	# grab the available modes using listmodes.awk:
	xa=($externs)
	extmodes=$(awk -f "$spath"/listmodes.awk -v output="${xa[0]}" <<< "$xrr")
	intmodes=$(awk -f "$spath"/listmodes.awk -v output="$int" <<< "$xrr")

	# the 'preferred' (native?) mode will be marked with a '+'.
	# save that item, and then search in the externals for it.
	native=$(grep '+' <<< "$intmodes")
	if (( $? != 0 )); then
		echo "No native resolution detected.  Aborting." 1>&2
		exit 1
	fi
	native=${native/ +/}
	[[ $verbose == 1 ]] && echo "$int native resolution: $native"

	if grep -q "$native" <<< "$extmodes"; then
		[[ $verbose == 1 ]] && echo "Setting $int,${xa[0]} to $native"
		xrandr --output ${xa[0]} --mode $native --output $int --mode $native \
			--same-as ${xa[0]}
		exit
	fi

	# not sure what, if any guarantees there are as to how xrandr
	# orders the modes, so we'll sort them ourselves.
	extmodes=$(sort -gr <<< "$extmodes")
	intmodes=$(sort -gr <<< "$intmodes")
	# un-elegant loop:
	match=0
	for n in $intmodes ; do
		for m in $extmodes ; do
			d0=$((${m/x*/} - ${n/x*/}))
			d1=$((${m/*x/} - ${n/*x/}))
			if (( $d0*$d0 + $d1*$d1 <= $sloppyness )); then
				match=1
				break
			fi
		done
		(( $match == 1 )) && break;
	done
	if (( $match == 0 )); then
		echo "No compatible modes found x_x" 1>&2
		exit 1
	fi

	[[ $verbose == 1 ]]  && echo "Setting $int to $n and ${xa[0]} to $m"
	xrandr --output ${xa[0]} --mode $m --output $int --mode $n \
		--same-as ${xa[0]}

	# NOTE: The -a parameter controls a trade-off between accuracy (how tight
	# the match is) and resolution (how many columns of pixels you have).
	# NOTE: we define the "best" match by using the width as a high-order
	# key and the height as a low order key.  This may not yield the highest
	# resolution in terms of the pixel count.

	exit
fi

if [[ $discon == 1 ]]; then
	xrcmd=""
	for ext in $externs; do
		xrcmd="$xrcmd --output $ext --off"
	done
	xrandr $xrcmd --output $int --auto
fi
